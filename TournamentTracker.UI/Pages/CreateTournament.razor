@page "/createtournament"

<Alert IsVisible="@isVisible" ErrorMessage="@ErrorMessage"></Alert>

<h1>Create Tournament</h1>

<EditForm Model="@TournamentState" OnValidSubmit="@Next">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div>
        <div class="form-group w-25">
            <label>Tournament Name </label>
            <InputText class="form-control" @bind-Value=TournamentState.TournamentName/>
        </div>

        <div class="mt-4 form-group-item w-25">
            <label>Entry Fee</label>
            <InputNumber class="form-control" @bind-Value=TournamentState.EntryFee/>
        </div>
    </div>
    <button class="mt-4 btn btn-primary" type="submit">Next</button>
</EditForm>

@inject NavigationManager Navigation
@inject TournamentVM TournamentState
@inject ITournament TournamentService
@inherits AbstractComponent
@inject ILogger<CreateTournament> Logger

@code {
    protected override void OnInitialized()
    {
        TournamentState.EntryFee = null;
        TournamentState.TournamentName = string.Empty;
    }

    private async Task Next()
    {

        bool success = await Validate();
        if (success)
        {
            Navigation.NavigateTo("/createtournament/addteam");
        }
        else
        {
            isVisible = true;
            ErrorMessage = $"Please enter a new tournament name. This tournament already exists";
        }

    }

    private async Task<bool> Validate()
    {


        var tournamentRecord = new List<Core.Models.Tournament>();

        try
        {
             tournamentRecord = await TournamentService.List(x => x.TournamentName == TournamentState.TournamentName);
        }
        catch (Exception ex)
        {
            Guid guid = new Guid();
            isVisible = true;
            ErrorMessage = $"{guid}: Failed to check tournament";
            Logger.LogError($"{guid} Error: Failed to check tournament {ex.Message} {ex.StackTrace}");
        }

        if (tournamentRecord?.Count > 0)
        {
            return false;
        }

        return true;

    }


}
